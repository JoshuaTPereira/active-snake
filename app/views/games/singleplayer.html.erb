<script>

const Direction = {
  UP: 0,
  DOWN: 1,
  LEFT: 2,
  RIGHT: 3
}

class Snake {
  constructor(columnCount, rowCount, modWall) {
    this.columnCount = columnCount;
    this.rowCount = rowCount;
    this.modWall = modWall;
    this.snake = [createVector(Math.floor(columnCount / 2), Math.floor(rowCount / 2))];
    this.food = this.generateFood();

    this.hasWon = false;
    this.hasLost = false;
  }

  generateFood() {
    const foodOptions = [];

    for (let i = 0; i < this.columnCount; i++) {
      for (let j = 0; j < this.rowCount; j++) {
        if (!this.snake.some(vector => vector.x === i && vector.y === j)) {
          foodOptions.push(createVector(i, j));
        }
      }
    }

    if (foodOptions.length === 0) {
      this.hasWon = true;
      return createVector(-1, -1);
    }

    return foodOptions[Math.floor(Math.random() * foodOptions.length)];
  }

  mod(x, y) {
    return ((x % y) + y) % y;
  }

  getNextVector(direction) {
    const currentVector = this.snake[0];
    let nextVector;

    if (this.modWall) {
      switch (direction) {
        case (Direction.UP):
          nextVector = createVector(currentVector.x, this.mod(currentVector.y - 1, this.rowCount));
        break;
        case (Direction.DOWN):
          nextVector = createVector(currentVector.x, this.mod(currentVector.y + 1, this.rowCount));
        break;
        case (Direction.LEFT):
          nextVector = createVector(this.mod(currentVector.x - 1, this.columnCount), currentVector.y);
        break;
        case (Direction.RIGHT):
          nextVector = createVector(this.mod(currentVector.x + 1, this.columnCount), currentVector.y);
        break;
      }
    }
    else {
      switch (direction) {
        case (Direction.UP):
          nextVector = createVector(currentVector.x, currentVector.y - 1);
        break;
        case (Direction.DOWN):
          nextVector = createVector(currentVector.x, currentVector.y + 1);
        break;
        case (Direction.LEFT):
          nextVector = createVector(currentVector.x - 1, currentVector.y);
        break;
        case (Direction.RIGHT):
          nextVector = createVector(currentVector.x + 1, currentVector.y);
        break;
      }
    }

    return nextVector;
  }

  move(direction) {
    const nextVector = this.getNextVector(direction);

    if (nextVector.x < 0 || nextVector.x > this.columnCount - 1 || nextVector.y < 0 || nextVector.y > this.rowCount - 1) {
      //Will move out of bounds
      this.hasLost = true;
    }
    else if (this.snake.some(vector => vector.x === nextVector.x && vector.y === nextVector.y)) {
      const tail = this.snake[this.snake.length - 1];

      if (nextVector.x === tail.x && nextVector.y === tail.y) {
        //Will collide with tail, but tail will be out of the way next frame
        this.snake.unshift(nextVector);
        this.snake.pop();
      }
      else {
        //Will collide with self
        this.hasLost = true;
        this.snake.unshift(nextVector);
        this.snake.pop();
      }
    }
    else if (nextVector.x === this.food.x && nextVector.y === this.food.y) {
      //Will consume food
      this.snake.unshift(nextVector);
      this.food = this.generateFood();
    }
    else {
      //Will move normally
      this.snake.unshift(nextVector);
      this.snake.pop();
    }
  }
}

let snake;
let currentDirection = Direction.RIGHT;
let nextDirection = Direction.RIGHT;

const columnCount = 30;
const rowCount = 30;
const modWall = true

const speed = 1;
const cellSize = 20;
const canvasWidth = 600;
const canvasHeight = 600;
const xOffset = (canvasWidth - (columnCount * cellSize)) / 2
const yOffset = (canvasHeight - (rowCount * cellSize)) / 2

function setup() {
  snake = new Snake(columnCount, rowCount, modWall);
  createCanvas(canvasWidth, canvasHeight);
}

function draw() {
  background(0);
  stroke(255);

  //Render board
  fill(0);
  for (let i = 0; i < snake.columnCount; i++) {
    for (let j = 0; j < snake.rowCount; j++) {
      rect(cellSize * i + xOffset, cellSize * j + yOffset, cellSize, cellSize);
    }
  }

  //Render snake
  fill(0, 255, 0);
  snake.snake.forEach(cell => rect(cellSize * cell.x + xOffset, cellSize * cell.y + yOffset, cellSize, cellSize));

  //Render food
  fill(255, 0, 0);
  rect(cellSize * snake.food.x + xOffset, cellSize * snake.food.y + yOffset, cellSize, cellSize);

  if (!snake.hasLost && frameCount % speed === 0) {
    currentDirection = nextDirection;
    snake.move(currentDirection);
  }
}

function keyPressed() {
  switch (keyCode) {
    case (UP_ARROW):
      if (snake.snake.length === 1 || currentDirection != Direction.DOWN) {
        nextDirection = Direction.UP;
      }
    break;
    case (DOWN_ARROW):
      if (snake.snake.length === 1 || currentDirection != Direction.UP) {
        nextDirection = Direction.DOWN;
      }
    break;
    case (LEFT_ARROW):
      if (snake.snake.length === 1 || currentDirection != Direction.RIGHT) {
        nextDirection = Direction.LEFT;
      }
    break;
    case (RIGHT_ARROW):
      if (snake.snake.length === 1 || currentDirection != Direction.LEFT) {
        nextDirection = Direction.RIGHT;
      }
    break;
  }
}

</script>
